import serial
import time
import re
import random
import threading
import os
from smspdudecoder.fields import SMSDeliver
from io import StringIO
from collections import defaultdict
from datetime import timezone, timedelta
from queue import Queue

class SMSHandlerWithFileQueue:
    def __init__(self, port='/dev/ttyUSB2', baudrate=115200, timeout=3, queue_file='/tmp/sms_queue.txt'):
        self.port = port
        self.baudrate = baudrate
        self.timeout = timeout
        self.queue_file = queue_file
        self.ser = None
        self.is_listening = False
        self.multipart_messages = defaultdict(lambda: defaultdict(dict))
        self.message_buffer = defaultdict(list)
        
    def connect(self):
        """K·∫øt n·ªëi t·ªõi modem"""
        try:
            self.ser = serial.Serial(self.port, self.baudrate, timeout=self.timeout)
            self.ser.write(b'AT+CMGF=0\r')
            time.sleep(1)
            self.ser.write(b'AT+CNMI=2,2,0,0,0\r')
            time.sleep(1)
            print(f"ƒê√£ k·∫øt n·ªëi t·ªõi modem tr√™n {self.port}")
            return True
        except Exception as e:
            print(f"L·ªói k·∫øt n·ªëi modem: {e}")
            return False
    
    def disconnect(self):
        """Ng·∫Øt k·∫øt n·ªëi modem"""
        if self.ser and self.ser.is_open:
            self.ser.close()
            print("ƒê√£ ng·∫Øt k·∫øt n·ªëi modem")
    
    def _send_pdu_sms(self, phone_number, message):
        """G·ª≠i SMS b·∫±ng PDU mode"""
        try:
            print(f"ƒêang g·ª≠i tin nh·∫Øn t·ªõi {phone_number}: {message[:50]}...")
            
            # Chu·∫©n h√≥a s·ªë ƒëi·ªán tho·∫°i
            phone_number = phone_number.lstrip("+").replace(" ", "")
            if len(phone_number) % 2 != 0:
                phone_number += 'F'
            swapped_number = ''.join([phone_number[i+1] + phone_number[i] for i in range(0, len(phone_number), 2)])
            
            max_single_length = 70
            if len(message) <= max_single_length:
                # Tin nh·∫Øn ƒë∆°n
                ucs2_msg = message.encode('utf-16-be').hex().upper()
                pdu_length = len(ucs2_msg) // 2
                
                pdu = "001100"
                pdu += f"0C91{swapped_number}0008AA{pdu_length:02X}{ucs2_msg}"
                
                self.ser.write(b'AT+CMGF=0\r')
                time.sleep(0.5)
                pdu_length_for_cmgs = (len(pdu) // 2) - 1
                cmd = f'AT+CMGS={pdu_length_for_cmgs}\r'
                self.ser.write(cmd.encode())
                time.sleep(0.5)
                self.ser.write((pdu + "\x1a").encode())
                time.sleep(2)
                
                print(f"‚úì ƒê√£ g·ª≠i tin nh·∫Øn ƒë∆°n th√†nh c√¥ng")
            else:
                # Tin nh·∫Øn multipart
                max_part_length = 67
                total_parts = (len(message) + max_part_length - 1) // max_part_length
                ref_number = random.randint(0, 255)
                
                print(f"G·ª≠i tin nh·∫Øn d√†i ({len(message)} k√Ω t·ª±) th√†nh {total_parts} ph·∫ßn:")
                
                for part_num in range(1, total_parts + 1):
                    start = (part_num - 1) * max_part_length
                    end = start + max_part_length
                    part = message[start:end]
                    
                    udh = [0x05, 0x00, 0x03, ref_number, total_parts, part_num]
                    udh_hex = ''.join(f"{x:02X}" for x in udh)
                    
                    ucs2_part = part.encode('utf-16-be').hex().upper()
                    user_data = udh_hex + ucs2_part
                    user_data_length = len(user_data) // 2
                    
                    pdu = "005100"
                    pdu += f"0C91{swapped_number}0008AA{user_data_length:02X}{user_data}"
                    
                    self.ser.write(b'AT+CMGF=0\r')
                    time.sleep(0.5)
                    pdu_length_for_cmgs = (len(pdu) // 2) - 1
                    cmd = f'AT+CMGS={pdu_length_for_cmgs}\r'
                    self.ser.write(cmd.encode())
                    time.sleep(0.5)
                    self.ser.write((pdu + "\x1a").encode())
                    time.sleep(3)
                    
                    print(f"  ‚úì ƒê√£ g·ª≠i ph·∫ßn {part_num}/{total_parts}")
                
                print(f"‚úì Ho√†n th√†nh g·ª≠i tin nh·∫Øn multipart")
            
            # Kh√¥i ph·ª•c ch·∫ø ƒë·ªô nh·∫≠n tin nh·∫Øn
            self.ser.write(b'AT+CNMI=2,2,0,0,0\r')
            time.sleep(0.5)
            
            return True
            
        except Exception as e:
            print(f"‚úó L·ªói g·ª≠i SMS: {e}")
            return False
    
    def _process_file_queue(self):
        """X·ª≠ l√Ω h√†ng ƒë·ª£i tin nh·∫Øn t·ª´ file"""
        while self.is_listening:
            try:
                if os.path.exists(self.queue_file):
                    with open(self.queue_file, 'r', encoding='utf-8') as f:
                        lines = f.readlines()
                    
                    if lines:
                        # X·ª≠ l√Ω tin nh·∫Øn ƒë·∫ßu ti√™n
                        line = lines[0].strip()
                        if '|' in line:
                            phone_number, message = line.split('|', 1)
                            print(f"ƒêang x·ª≠ l√Ω tin nh·∫Øn t·ª´ file queue...")
                            
                            if self._send_pdu_sms(phone_number, message):
                                # X√≥a tin nh·∫Øn ƒë√£ g·ª≠i th√†nh c√¥ng
                                remaining_lines = lines[1:]
                                with open(self.queue_file, 'w', encoding='utf-8') as f:
                                    f.writelines(remaining_lines)
                                print(f"ƒê√£ x√≥a tin nh·∫Øn kh·ªèi queue")
                            else:
                                print(f"G·ª≠i tin nh·∫Øn th·∫•t b·∫°i, gi·ªØ l·∫°i trong queue")
                                time.sleep(10)  # Ch·ªù 10 gi√¢y tr∆∞·ªõc khi th·ª≠ l·∫°i
                        else:
                            # D√≤ng kh√¥ng h·ª£p l·ªá, x√≥a n√≥
                            remaining_lines = lines[1:]
                            with open(self.queue_file, 'w', encoding='utf-8') as f:
                                f.writelines(remaining_lines)
                    else:
                        time.sleep(1)  # Kh√¥ng c√≥ tin nh·∫Øn, ch·ªù 1 gi√¢y
                else:
                    time.sleep(1)  # File kh√¥ng t·ªìn t·∫°i, ch·ªù 1 gi√¢y
            except Exception as e:
                print(f"L·ªói x·ª≠ l√Ω file queue: {e}")
                time.sleep(5)
    
    def parse_pdu_raw(self, pdu_hex):
        """Ph√¢n t√≠ch PDU th√¥ ƒë·ªÉ t√¨m th√¥ng tin multipart"""
        try:
            pdu_bytes = bytes.fromhex(pdu_hex)
            smsc_len = pdu_bytes[0]
            offset = 1 + smsc_len
            
            pdu_type = pdu_bytes[offset]
            offset += 1
            
            sender_len = pdu_bytes[offset]
            offset += 1
            sender_type = pdu_bytes[offset]
            offset += 1
            
            sender_digits = (sender_len + 1) // 2
            offset += sender_digits
            offset += 1  # PID
            offset += 1  # DCS
            offset += 7  # Timestamp
            
            udl = pdu_bytes[offset]
            offset += 1
            
            udhi = (pdu_type & 0x40) != 0
            
            if udhi and offset < len(pdu_bytes):
                udhl = pdu_bytes[offset]
                offset += 1
                
                udh_end = offset + udhl
                while offset < udh_end:
                    iei = pdu_bytes[offset]
                    offset += 1
                    iedl = pdu_bytes[offset]
                    offset += 1
                    
                    if iei == 0x00 and iedl == 3:
                        ref_num = pdu_bytes[offset]
                        total_parts = pdu_bytes[offset + 1]
                        seq_num = pdu_bytes[offset + 2]
                        return (ref_num, total_parts, seq_num)
                    
                    offset += iedl
            
            return None
        except Exception as e:
            print(f"L·ªói ph√¢n t√≠ch PDU th√¥: {e}")
            return None
    
    def listen_sms(self):
        """L·∫Øng nghe tin nh·∫Øn SMS"""
        print("ƒêang l·∫Øng nghe tin nh·∫Øn m·ªõi t·ª´ modem...")
        print(f"File queue: {self.queue_file}")
        self.is_listening = True
        
        # Kh·ªüi ƒë·ªông thread x·ª≠ l√Ω file queue
        queue_thread = threading.Thread(target=self._process_file_queue, daemon=True)
        queue_thread.start()
        
        while self.is_listening:
            try:
                line = self.ser.readline()
                if line:
                    text = line.decode(errors='ignore').strip()
                    if text.startswith('+CMT:'):
                        pdu_line = self.ser.readline().decode(errors='ignore').strip()
                        if re.fullmatch(r'[0-9A-Fa-f]+', pdu_line):
                            try:
                                sms = SMSDeliver.decode(StringIO(pdu_line))
                                sender = sms['sender']['number']
                                scts = sms['scts'].astimezone(timezone(timedelta(hours=7)))
                                content = sms['user_data']['data']
                                
                                # Ki·ªÉm tra multipart
                                multipart_info = self.parse_pdu_raw(pdu_line)
                                
                                if multipart_info:
                                    ref_num, total_parts, seq_num = multipart_info
                                    print(f"üì± Nh·∫≠n ph·∫ßn {seq_num}/{total_parts} (ref: {ref_num}) t·ª´ {sender}")
                                    
                                    self.multipart_messages[sender][ref_num][seq_num] = content
                                    
                                    if 'timestamp' not in self.multipart_messages[sender][ref_num]:
                                        self.multipart_messages[sender][ref_num]['timestamp'] = scts
                                    else:
                                        if scts < self.multipart_messages[sender][ref_num]['timestamp']:
                                            self.multipart_messages[sender][ref_num]['timestamp'] = scts
                                    
                                    received_parts = [k for k in self.multipart_messages[sender][ref_num] if isinstance(k, int)]
                                    
                                    if len(received_parts) == total_parts:
                                        full_message = ''
                                        for i in range(1, total_parts + 1):
                                            if i in self.multipart_messages[sender][ref_num]:
                                                full_message += self.multipart_messages[sender][ref_num][i]
                                        
                                        timestamp = self.multipart_messages[sender][ref_num]['timestamp']
                                        
                                        print(f"\n{'='*60}")
                                        print(f"üì® TIN NH·∫ÆN HO√ÄN CH·ªàNH")
                                        print(f"S·ªë ng∆∞·ªùi g·ª≠i: {sender}")
                                        print(f"Th·ªùi gian: {timestamp.strftime('%Y-%m-%d %H:%M:%S')}")
                                        print(f"N·ªôi dung: {full_message}")
                                        print(f"{'='*60}\n")
                                        
                                        del self.multipart_messages[sender][ref_num]
                                else:
                                    # S·ª≠ d·ª•ng ph∆∞∆°ng ph√°p gh√©p theo th·ªùi gian
                                    self.message_buffer[sender].append({
                                        'time': scts,
                                        'content': content,
                                        'timestamp': time.time()
                                    })
                                    
                                    current_time = time.time()
                                    recent_messages = [msg for msg in self.message_buffer[sender] 
                                                     if current_time - msg['timestamp'] <= 3]
                                    
                                    if len(recent_messages) >= 2:
                                        recent_messages.sort(key=lambda x: x['time'])
                                        full_content = ''.join([msg['content'] for msg in recent_messages])
                                        earliest_time = recent_messages[0]['time']
                                        
                                        print(f"\n{'='*60}")
                                        print(f"üì® TIN NH·∫ÆN ƒê∆Ø·ª¢C GH√âP")
                                        print(f"S·ªë ng∆∞·ªùi g·ª≠i: {sender}")
                                        print(f"Th·ªùi gian: {earliest_time.strftime('%Y-%m-%d %H:%M:%S')}")
                                        print(f"N·ªôi dung: {full_content}")
                                        print(f"{'='*60}\n")
                                        
                                        self.message_buffer[sender] = []
                                    elif len(recent_messages) == 1 and current_time - recent_messages[0]['timestamp'] > 2:
                                        # Tin nh·∫Øn ƒë∆°n sau 2 gi√¢y ch·ªù
                                        msg = recent_messages[0]
                                        print(f"\nüì± Tin nh·∫Øn ƒë∆°n:")
                                        print(f"S·ªë ng∆∞·ªùi g·ª≠i: {sender}")
                                        print(f"Th·ªùi gian: {msg['time'].strftime('%Y-%m-%d %H:%M:%S')}")
                                        print(f"N·ªôi dung: {msg['content']}\n")
                                        self.message_buffer[sender] = []
                                    
                                    # D·ªçn d·∫πp tin nh·∫Øn c≈©
                                    self.message_buffer[sender] = [msg for msg in self.message_buffer[sender] 
                                                                 if current_time - msg['timestamp'] <= 10]
                                        
                            except Exception as e:
                                print(f"L·ªói ph√¢n t√≠ch PDU: {e}")
            except Exception as e:
                if self.is_listening:
                    print(f"L·ªói ƒë·ªçc serial: {e}")
                break
            time.sleep(0.05)
    
    def stop_listening(self):
        """D·ª´ng l·∫Øng nghe"""
        self.is_listening = False
        print("ƒê√£ d·ª´ng l·∫Øng nghe tin nh·∫Øn")
    
    def add_to_queue(self, phone_number, message):
        """Th√™m tin nh·∫Øn v√†o file queue"""
        try:
            with open(self.queue_file, 'a', encoding='utf-8') as f:
                f.write(f"{phone_number}|{message}\n")
            print(f"‚úì ƒê√£ th√™m tin nh·∫Øn v√†o queue: {phone_number}")
            return True
        except Exception as e:
            print(f"‚úó L·ªói th√™m tin nh·∫Øn v√†o queue: {e}")
            return False
    
    def get_queue_status(self):
        """Ki·ªÉm tra tr·∫°ng th√°i h√†ng ƒë·ª£i"""
        try:
            if os.path.exists(self.queue_file):
                with open(self.queue_file, 'r', encoding='utf-8') as f:
                    lines = f.readlines()
                return len(lines)
            return 0
        except Exception as e:
            print(f"L·ªói ki·ªÉm tra queue: {e}")
            return -1

# T·∫°o service daemon
def run_sms_service():
    """Ch·∫°y SMS service nh∆∞ m·ªôt daemon"""
    sms_handler = SMSHandlerWithFileQueue('/dev/ttyUSB2')
    
    if sms_handler.connect():
        try:
            print("üöÄ SMS Service ƒë√£ kh·ªüi ƒë·ªông!")
            print("üìÅ S·ª≠ d·ª•ng file queue:", sms_handler.queue_file)
            print("üì± ƒêang l·∫Øng nghe tin nh·∫Øn v√† x·ª≠ l√Ω queue...")
            print("‚èπÔ∏è  Nh·∫•n Ctrl+C ƒë·ªÉ d·ª´ng service")
            
            sms_handler.listen_sms()
            
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è  ƒêang d·ª´ng SMS Service...")
            sms_handler.stop_listening()
        finally:
            sms_handler.disconnect()
            print("‚úÖ SMS Service ƒë√£ d·ª´ng")
    else:
        print("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi modem!")

# S·ª≠ d·ª•ng
if __name__ == '__main__':
    import sys
    
    if len(sys.argv) > 1:
        if sys.argv[1] == 'service':
            # Ch·∫°y nh∆∞ service
            run_sms_service()
        elif sys.argv[1] == 'send':
            # G·ª≠i tin nh·∫Øn t·ª´ command line
            if len(sys.argv) >= 4:
                phone = sys.argv[2]
                message = ' '.join(sys.argv[3:])
                
                handler = SMSHandlerWithFileQueue()
                if handler.add_to_queue(phone, message):
                    print(f"‚úÖ Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c th√™m v√†o queue")
                else:
                    print(f"‚ùå L·ªói th√™m tin nh·∫Øn v√†o queue")
            else:
                print("S·ª≠ d·ª•ng: python sms_handler.py send <s·ªë_ƒëi·ªán_tho·∫°i> <tin_nh·∫Øn>")
        elif sys.argv[1] == 'status':
            # Ki·ªÉm tra tr·∫°ng th√°i queue
            handler = SMSHandlerWithFileQueue()
            count = handler.get_queue_status()
            if count >= 0:
                print(f"üìä S·ªë tin nh·∫Øn trong queue: {count}")
            else:
                print("‚ùå L·ªói ki·ªÉm tra queue")
        else:
            print("Tham s·ªë kh√¥ng h·ª£p l·ªá!")
            print("S·ª≠ d·ª•ng:")
            print("  python sms_handler.py service        # Ch·∫°y service")
            print("  python sms_handler.py send <sdt> <msg>  # G·ª≠i tin nh·∫Øn")
            print("  python sms_handler.py status         # Ki·ªÉm tra queue")
    else:
        # Ch·∫°y interactive mode
        print("üéõÔ∏è  SMS Handler Interactive Mode")
        print("Nh·∫≠p 'help' ƒë·ªÉ xem danh s√°ch l·ªánh")
        
        handler = SMSHandlerWithFileQueue('/dev/ttyUSB2')
        
        if handler.connect():
            try:
                # Kh·ªüi ƒë·ªông listener trong thread ri√™ng
                listen_thread = threading.Thread(target=handler.listen_sms, daemon=True)
                listen_thread.start()
                
                while True:
                    cmd = input("sms> ").strip().lower()
                    if cmd == 'quit' or cmd == 'exit':
                        break
                    elif cmd == 'help':
                        print("üìã Danh s√°ch l·ªánh:")
                        print("  send         - G·ª≠i tin nh·∫Øn")
                        print("  status       - Ki·ªÉm tra queue")
                        print("  help         - Hi·ªÉn th·ªã tr·ª£ gi√∫p")
                        print("  quit/exit    - Tho√°t ch∆∞∆°ng tr√¨nh")
                    elif cmd == 'send':
                        phone = input("üìû Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i: ").strip()
                        message = input("üí¨ Nh·∫≠p n·ªôi dung tin nh·∫Øn: ").strip()
                        handler.add_to_queue(phone, message)
                    elif cmd == 'status':
                        count = handler.get_queue_status()
                        if count >= 0:
                            print(f"üìä S·ªë tin nh·∫Øn trong queue: {count}")
                        else:
                            print("‚ùå L·ªói ki·ªÉm tra queue")
                    elif cmd.strip() == '':
                        continue
                    else:
                        print(f"‚ùì L·ªánh kh√¥ng x√°c ƒë·ªãnh: {cmd}")
                
                handler.stop_listening()
                
            except KeyboardInterrupt:
                print("\n‚èπÔ∏è  ƒêang d·ª´ng...")
                handler.stop_listening()
            finally:
                handler.disconnect()
        else:
            print("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi modem!")